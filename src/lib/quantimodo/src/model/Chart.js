/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Quantimodo) {
      root.Quantimodo = {};
    }
    root.Quantimodo.Chart = factory(root.Quantimodo.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Chart model module.
   * @module model/Chart
   * @version 5.8.112511
   */

  /**
   * Constructs a new <code>Chart</code>.
   * @alias module:model/Chart
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>Chart</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Chart} obj Optional instance to populate.
   * @return {module:model/Chart} The populated <code>Chart</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('highchartConfig')) {
        obj['highchartConfig'] = ApiClient.convertToType(data['highchartConfig'], Object);
      }
      if (data.hasOwnProperty('chartId')) {
        obj['chartId'] = ApiClient.convertToType(data['chartId'], 'String');
      }
      if (data.hasOwnProperty('chartTitle')) {
        obj['chartTitle'] = ApiClient.convertToType(data['chartTitle'], 'String');
      }
      if (data.hasOwnProperty('explanation')) {
        obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
      }
      if (data.hasOwnProperty('svgUrl')) {
        obj['svgUrl'] = ApiClient.convertToType(data['svgUrl'], 'String');
      }
      if (data.hasOwnProperty('svg')) {
        obj['svg'] = ApiClient.convertToType(data['svg'], 'String');
      }
    }
    return obj;
  }

  /**
   *  Highcharts config that can be used if you have highcharts.js included on the page
   * @member {Object} highchartConfig
   */
  exports.prototype['highchartConfig'] = undefined;
  /**
   * Ex: correlationScatterPlot
   * @member {String} chartId
   */
  exports.prototype['chartId'] = undefined;
  /**
   * Ex: Overall Mood following Sleep Duration (R = -0.173)
   * @member {String} chartTitle
   */
  exports.prototype['chartTitle'] = undefined;
  /**
   * Ex: The chart above indicates that an increase in Sleep Duration is usually followed by an decrease in Overall Mood.
   * @member {String} explanation
   */
  exports.prototype['explanation'] = undefined;
  /**
   * Url to a static svg of the chart
   * @member {String} svgUrl
   */
  exports.prototype['svgUrl'] = undefined;
  /**
   * SVG string than can be embedded directly in HTML
   * @member {String} svg
   */
  exports.prototype['svg'] = undefined;



  return exports;
}));


