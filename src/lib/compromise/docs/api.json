{
  "generic": {
    "doc-inspect": {
      "data": {
        "desc": "return a handy array of meta-data for this subset. Default subset is sentences, but it can be anything.",
        "example": "nlp('The stage was set for the Alan Parsons Project! Which I believe was some sort of hovercraft.').data()\n//[{normal:'the stage was set...'}]",
        "returns": "array"
      },
      "found": {
        "desc": "is the match empty or not",
        "returns": "bool",
        "example": "nlp('oh say can you see?').match('see').found\n//true"
      },
      "all": {
        "desc": "zooms-out from a subset back to the whole input",
        "returns": "Text",
        "example": "nlp('this is yelling').verbs().toTitleCase().all().out()\n//this IS yelling"
      },
      "debug": {
        "desc": "pretty-print the current selection to the console",
        "returns": "Text",
        "example": "nlp('wayne’s world, party time, excellent- weeeyooweeeyoo!').out()"
      },
      "out": {
        "desc": "render parsed data as an output. supports `text`, `normal`, `array`, `html`, `grid`, `color`, `debug`, `csv`",
        "returns": "Text",
        "example": "nlp('you might say there’s a little Uter in all of us').match('#Adjective uter').out('html')\n//<span><span class=\"nl-Adjective\">little</span>&nbsp;<span class=\"nl-Person nl-FirstName\">Uter</span></span>"
      },
      "whitespace": {
        "desc": "set before or after whitespace on each match",
        "returns": "Text",
        "example": "nlp('We like Roy! We like Roy!').whitespace.before('   ').out()\n//We like Roy!   We like Roy!"
      },
      "normalize": {
        "desc": "transforms whitespace, case, punctuation, contractions and values, so that they are more standard and workable",
        "returns": "Text",
        "example": "nlp(' so... you like   DONUTS? have all the donuts in the WORLD!!!').normalize().sentences(0).out()\n//So you like donuts?"
      },
      "length": {
        "desc": "how many individual matches in the result",
        "returns": "int",
        "example": "nlp('jackie kennedy and aristotle onassis').people().length\n//2"
      },
      "random": {
        "desc": "sample a random section of n matches",
        "returns": "Text",
        "example": "nlp('one two three four').terms().random(2).out('array')\n//['four','one']"
      },
      "sort": {
        "desc": "set a new ordering for the sentences/results. Accepts `alphabetical`, `chronological`, `length`, `wordcount`, `frequency`",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().sort('alphabetical').out('array')\n//Curly, Larry, Moe"
      },
      "forEach": {
        "desc": "do something on each result independently",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().forEach((m,i)=> m.people().toLowerCase() )\n//curly\n//larry\n//moe"
      },
      "map": {
        "desc": "create a new array from these results",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().map((m)=> m.out('normal'))\n// ['curly', 'larry', 'moe']"
      },
      "filter": {
        "desc": "select only the results that return true for some function",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().filter(m => m.out('normal')==='larry' ).length\n//1"
      },
      "find": {
        "desc": "select only the first result that returns true",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().find(m => m.out('normal')==='larry' ).out()\n//\"Larry,\""
      },
      "reduce": {
        "desc": "combine the results of a function into one thing",
        "returns": "Text",
        "example": "nlp('Larry, Curly, and Moe').people().reduce((h,m) => {\n  var str=m.out('normal');\n  h[str]=true;\n  return h }, {})\n//{larry:true, curly:true, moe:true}"
      }
    },
    "word-changes": {
      "toTitleCase": {
        "desc": "set the first letter of each term as a capital",
        "returns": "Text",
        "example": "nlp('jupiter, pluto and mars').nouns().toTitleCase().all().out()\n//Jupiter, Pluto and Mars."
      },
      "toUpperCase": {
        "desc": "set all the letters as a capital",
        "returns": "Text",
        "example": "nlp('Dental plan. Lisa needs braces.').match('dental .').toUpperCase().out()\n//DENTAL PLAN."
      },
      "toLowerCase": {
        "desc": "set all the letters as a not-capital. Even acronyms and first-letters of sentences",
        "returns": "Text",
        "example": "nlp('Careful! They’re RUFFLED!!').toLowerCase().out()\n//careful! they’re ruffled!!"
      },
      "toCamelCase": {
        "desc": "remove whitespace and titlecase the words",
        "returns": "Text",
        "example": "nlp('natural language processing').toCamelCase().out()\n//NaturalLanguageProcessing"
      },
      "hyphenate": {
        "desc": "remove whitespace and add a hyphenate between the words",
        "returns": "Text",
        "example": "nlp('natural language processing').hyphenate().out()\n//natural-language-processing"
      },
      "dehyphenate": {
        "desc": "remove hyphens and add normal whitespace between words",
        "returns": "Text",
        "example": "nlp('natural-language processing').dehyphenate().out()\n//natural language processing"
      },
      "trim": {
        "desc": "remove leading and trailing whitespace from each match",
        "returns": "Text",
        "example": "nlp(' Lenny and Carl ').people().trim().out()\n//['Lenny', 'Carl']"
      },
      "getPunctuation": {
        "desc": "get an array of trailing-punctuation for the results",
        "returns": "Array",
        "example": "nlp('my bubbly, longnecked, beechwood aged lover').adjectives().eq(1).getPunctuation()\n//[',']"
      },
      "setPunctuation": {
        "desc": "overwrite the trailing punctuation",
        "returns": "Text",
        "example": "nlp('there\\'s a new mexico?').sentences().setPunctuation('!??').out()\n//there's a new mexico!??"
      }
    },
    "sentence-changes": {
      "insertBefore": {
        "desc": "append a word (or words) before each match",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('stupid flanders').match('flanders').insertBefore('sexy').all().out()\n//stupid sexy flanders"
      },
      "insertAfter": {
        "desc": "append a word (or words) after each match",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('i know so many words').insertAfter('bigly').all().out()\n//i know so many words bigly"
      },
      "insertAt": {
        "desc": "insert a word or words at a known index (zero-based)",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('so you are from Africa?').insertAt(2, 'like,').all().out()\n//so you are like, from africa?"
      },
      "lump": {
        "desc": "merge matches into one term, with shared tags.",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('Keanu Reeves said whoa').match('#Person+').lump().all().out('terms')\n//['Keanu Reeves', 'said', 'whoa']"
      },
      "replaceWith": {
        "desc": "turn the current selection into something else. Essentially just delete() -> insertAt(). The second param says whether to keep original tags around.",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('it was the worst of times').match('worst').replaceWith('blurst', true).all().out()\n//it was the blurst of times"
      },
      "replace": {
        "desc": "turn a new selection into something else. Essentially just match() -> delete() -> insertAt(). Third optional param keeps original tags around.",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('trust me folks, big league.').replace('big league','bigly').all().out()\n//trust me folks, bigly."
      },
      "delete": {
        "desc": "remove a match from the Text permanently. For a temporary filter, see `.not()`",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('you don’t win friends with salad').delete('do not').out()\n//you win friends with salad"
      },
      "splitOn": {
        "desc": "split matches into [before, match, after]",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('Monorail...Once again! Monorail... Monorail!').splitOn('monorail').get(0).out()\n//Monorail"
      },
      "splitBefore": {
        "desc": "split matches into [before,  match + after]",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('Monorail...Once again! Monorail... Monorail!').splitBefore('monorail').get(0).out()\n//Monorail...Once again!"
      },
      "splitAfter": {
        "desc": "split matches into [before + match,  after]",
        "mutative": true,
        "returns": "Text",
        "example": "nlp('Monorail...Once again! Monorail... Monorail!').splitAfter('monorail').get(0).out()\n//Monorail"
      },
      "slice": {
        "desc": "grab a subset of the results",
        "mutative": false,
        "returns": "Text",
        "example": "nlp('Homer, have you been eating that sandwich again?').terms().slice(0, 3).out()\n//Homer, have you"
      },
      "clone": {
        "desc": "copy the object, so changes no longer effect the original (make it ~immutable)",
        "mutative": false,
        "returns": "Text",
        "example": "nlp('would somebody please think of the children').clone().toUpperCase().parent.out()\n//would somebody please think of the children"
      },
      "concat": {
        "desc": "combine two results into one",
        "mutative": false,
        "returns": "Text",
        "example": "nlp('My name is Otto').concat('and i love to get blotto').sentences().length\n//1"
      },
      "flatten": {
        "desc": "turn a list of results into one result",
        "mutative": false,
        "returns": "Text",
        "example": "nlp('sex cauldron? I thought they closed that place down.').flatten().length\n//1"
      }
    },
    "match/tag": {
      "match": {
        "desc": "zoom-in to a subset of the text, using a [regex-like syntax](https:\n//github.com/nlp-compromise/compromise/wiki/Match-syntax)",
        "returns": "Text",
        "example": "nlp('we understand, we are from the land of chocolate.').match('land of #Noun').out()\n//land of chocolate"
      },
      "not": {
        "desc": "return parts of the text that do not match. Like .match() but opposite.",
        "returns": "Text",
        "example": "nlp('wait, there’s a new mexico?').places().not('new').out()\n//mexico"
      },
      "if": {
        "desc": "returns only the sets which contain this match. Like a Array.filter() method, for your results",
        "returns": "Text",
        "example": "nlp('We’re here, we’re clear, we don’t want anymore bears.').clauses().if('anymore').out()\n//we don't want anymore bears"
      },
      "ifNo": {
        "desc": "removes any sets that have this match",
        "returns": "Text",
        "example": "nlp('We’re here, we’re clear, we don’t want anymore bears.').clauses().ifNo('anymore').out()\n//We're here, we're clear,"
      },
      "has": {
        "desc": "quick check to see if this match is found",
        "returns": "Boolean",
        "example": "nlp('I am the very model of a modern Major-General').has('#Pronoun')\n//true,"
      },
      "before": {
        "desc": "find a match, and return everything infront of it",
        "returns": "Text",
        "example": "nlp('one two three four five').before('three').out()\n//one two"
      },
      "after": {
        "desc": "find a match, and return everything following of it",
        "returns": "Text",
        "example": "nlp('one two three four five').after('three').out()\n//four five"
      },
      "tag": {
        "desc": "set a particular interpretation for these terms. Can tag your match as anything. Supported tags do dependency/conflict logic.",
        "returns": "Text",
        "example": "nlp('Michael Apple ate a delicious apple.').match('#FirstName apple').tag('Person').people().out()\n//Michael Apple"
      },
      "unTag": {
        "desc": "remove a particular tag for all these terms. Passing in a '*' removes all the current tags.",
        "returns": "Text",
        "example": "nlp('they made a catch & scored a run').match(['run','catch']).unTag('#Verb').nouns().out('array')\n//catch, run"
      },
      "canBe": {
        "desc": "return only terms that have no conflicts with this tag",
        "returns": "Text",
        "example": "nlp('it’s fusilli jerry!').canBe('Person').out()\n//fusilli jerry"
      }
    }
  },
  "subsets": {
    "contractions": {
      "data": {
        "desc": "return a handy array of meta-data for this the contractions in this text",
        "example": "nlp(' I’d like to request seventeen dollars for a push broom rebristling').contractions().data()\n//[{text:'I'd'}]",
        "returns": "array"
      },
      "expand": {
        "desc": "turn `didn't` into `did not`, etc",
        "returns": "Text",
        "example": "nlp('He’s the greatest guy in history').contractions().expand().out('')\n//He is"
      },
      "contract": {
        "desc": "turn did not into didn't, etc.",
        "returns": "Text",
        "example": "nlp('He is about to hit a chestnut tree').contractions().contract().out('')\n//He's"
      },
      "contracted": {
        "desc": "show only the contractions that are currently contracted -eg. `i'll` but not `i will`",
        "returns": "Text",
        "example": "nlp('Lisa, I’d like to buy your rock.').contractions().contracted().out('')\n//I'd"
      },
      "expanded": {
        "desc": "show only the contractions that are currently not contracted -eg. `he would` but not `he'd`",
        "returns": "Text",
        "example": "nlp('Lisa, I would like to buy your rock.').contractions().expanded().out('')\n//I would"
      }
    },
    "dates": {
      "data": {
        "desc": "return an array of meta-data about the dates and times in this text",
        "example": "nlp('Finally, I just stopped caring. Luckily for me, it was 1980 and no one noticed.').dates().data()\n//[{text:'1980'}]",
        "returns": "array"
      },
      "toShortForm": {
        "desc": "turn 'Thurs' and 'Sept' into `Thursday` and `September`",
        "returns": "Text",
        "example": "nlp('April, June, and Sept').dates().toShortForm().all().out()\n//Apr, Jun, and Sept"
      },
      "toLongForm": {
        "desc": "turn `Thursday` and `September` into 'Thurs' and 'Sept'",
        "returns": "Text",
        "example": "nlp('April, June, and Sept').dates().toShortForm().all().out()\n//April, June, and September"
      }
    },
    "ngrams": {
      "data": {
        "desc": "return a handy array of meta-data for the n-grams in this text. accepts an obj with `max` or `size` number",
        "example": "nlp('love love me do.').ngrams({max:3}).data()\n//[{text:'love', count:2, size:1}..]",
        "returns": "array"
      },
      "unigrams": {
        "desc": "return only the ngrams of size 1",
        "returns": "Text",
        "example": "nlp('University of Toronto, in toronto').ngrams().unigrams(0).data()\n//[{normal:'toronto', count:2, size:1}]"
      },
      "bigrams": {
        "desc": "return only the ngrams of size 2",
        "returns": "Text",
        "example": "nlp('The University of Ryerson and University of Toronto, in toronto').ngrams().bigrams(0).data()\n//[{normal:'university of', count:2, size:2}]"
      },
      "trigrams": {
        "desc": "return only the ngrams of size 3",
        "returns": "Text",
        "example": "nlp('we like Roy! we like Roy!').ngrams().trigrams(0).data()\n//[{normal:'we like roy', count:2, size:3}]"
      },
      "sort": {
        "desc": "the default sort for ngrams - count, then size, then character length. (called by default)",
        "returns": "Text",
        "example": "nlp('i scream, you scream, we all scream for icecream.').ngrams().sort().first().out()\n//scream"
      }
    },
    "nouns": {
      "data": {
        "desc": "return a handy array of meta-data for the nouns in this text",
        "example": "nlp('Lunchlady Doris, have you got any grease?').nouns().data()\n//[{text:'Lunchlady Doris'}, {text:'grease'}]",
        "returns": "Array"
      },
      "isPlural": {
        "desc": "return only the plural nouns",
        "returns": "Text",
        "example": "nlp('All my life I’ve had one dream, to accomplish my many goals.').nouns().isPlural().out()\n//goals"
      },
      "hasPlural": {
        "desc": "return only the nouns which can be plural (sometimes called 'countable' nouns)",
        "returns": "Text",
        "example": "nlp('bring joy to the air, water, earth, and sky.').nouns().hasPlural().length\n//0"
      },
      "toPlural": {
        "desc": "transform singular nouns into their plural (inflected) forms",
        "returns": "Text",
        "example": "nlp('the purple dinosaur').nouns().toPlural().all().out()\n//the purple dinosaurs"
      },
      "toSingular": {
        "desc": "transform plural nouns into their singular forms",
        "returns": "Text",
        "example": "nlp('the king’s men').nouns().toSingular().out()\n//the king's man"
      },
      "toPossessive": {
        "desc": "transform nouns into a possessive form  - John → John's",
        "returns": "Text",
        "example": "nlp('the king').nouns().toPossessive().out()\n//the king's"
      },
      "articles": {
        "desc": "whether this noun deserves 'a' or 'an'",
        "returns": "Array",
        "example": "nlp('the king').nouns().articles()\n//[{text:\"king\", article:\"a\"}]"
      }
    },
    "sentences": {
      "data": {
        "desc": "return a handy array of meta-data for the sentences in this text",
        "example": "nlp('hi everybody! Hi Dr. Nick!').sentences().data().length\n//[{normal:'hi everybody'}, {normal:'hi dr nick'}]",
        "returns": "array"
      },
      "prepend": {
        "desc": "add a word (or words) at the beginning of these sentences, and move the sentnece's titlecase appropriately",
        "returns": "Text",
        "example": "nlp('I know so many words.').sentences().prepend('believe me').out()\n//Believe me, I know so many words."
      },
      "append": {
        "desc": "add a word (or words) at the end of these sentences, and move the sentnece's punctuation appropriately",
        "returns": "Text",
        "example": "nlp('I know so many words.').sentences().append('big league').out()\n//I know so many words big league."
      },
      "toPastTense": {
        "desc": "transform the sentences so that they are in the past tense",
        "returns": "Text",
        "example": "nlp('I pay the Homer tax.').sentences().toPastTense().out()\n//I paid the Homer tax."
      },
      "toPresentTense": {
        "desc": "transform the sentences so that they are in the present tense",
        "returns": "Text",
        "example": "nlp('I paid the Homer tax.').sentences().toPresentTense().out()\n//I pay the Homer tax."
      },
      "toFutureTense": {
        "desc": "transform the sentences so that they are in the future tense",
        "returns": "Text",
        "example": "nlp('That’s the home-owner tax.').sentences().toFutureTense().out()\n//That will be the home-owner tax"
      },
      "toContinuous": {
        "desc": "like present tense, but still happening. ('walks'->'is walking')",
        "returns": "Text",
        "example": "nlp('rock and/or roll').sentences().toContinuous().out()\n//rocking and/or rolling"
      },
      "toNegative": {
        "desc": "turn the sentence negative, so that it means the opposite thing",
        "returns": "Text",
        "example": "nlp('Now make like my pants, and split.').sentences(0).toNegative().out()\n//Now do not make like my pants, and split."
      },
      "toPositive": {
        "desc": "if the sentence is negatively-stated, make it say the opposite thing",
        "returns": "Text",
        "example": "nlp('The goggles do nothing!').sentences().toPositive().out()\n//The goggles do everything!"
      },
      "isPassive": {
        "desc": "return only sentences that are passive-tense",
        "returns": "Text",
        "example": "nlp('you were saved by the bell').sentences().isPassive().out()\n//you were saved by the bell"
      },
      "isQuestion": {
        "desc": "return only sentences that are questions",
        "returns": "Text",
        "example": "nlp('Dogs are funny. Are they funny? Yes they are.').sentences().isQuestion().out('array')\n//['are they funny']"
      },
      "toExclamation": {
        "desc": "replace the sentence's end punctuation with an exclamation point",
        "returns": "Text",
        "example": "nlp('sweet balls of fire?').sentences().toExclamation().out()\n//sweet balls of fire!"
      },
      "toQuestion": {
        "desc": "turn the sentence into a question",
        "returns": "Text",
        "example": "nlp('Stupider like a fox.').sentences().toQuestion().out()\n//Stupider like a fox?"
      },
      "toStatement": {
        "desc": "turn the sentence into a statement. Replace it's end punctuation with a period",
        "returns": "Text",
        "example": "nlp('Go out on a Tuesday? Who am I, Charlie Sheen?').sentences(0).toStatement().out()\n//Go out on a Tuesday. Who am I, Charlie Sheen?"
      }
    },
    "people": {
      "data": {
        "desc": "return a handy array of meta-data of people mentioned in the text",
        "example": "nlp('The bone-rattling bass of Mel Schacher? The competent drum work of Don Brewer?').people().data()\n//[{text:' Mel Schacher'}, {text:'Don Brewer'}]",
        "returns": "array"
      },
      "pronoun": {
        "desc": "find the pronoun used to refer to the person, or suggest one based on their inferred gender.",
        "returns": "String",
        "example": "nlp('Tony Hawk did a 900').people().pronoun()\n//'he'"
      },
      "firstNames": {
        "desc": "grab only the first-names",
        "returns": "Text",
        "example": "nlp('Tony Hawk did a 900').people().firstNames().out('array')\n//['tony']"
      },
      "lastNames": {
        "desc": "grab only the last-names",
        "returns": "Text",
        "example": "nlp('Tony Hawk did a 900').people().lastNames().out('array')\n//['hawk']"
      }
    },
    "values": {
      "data": {
        "desc": "return a handy array of meta-data for the numbers and values in this text",
        "example": "nlp('I’d like to request seventeen dollars for a push broom rebristling').values().data()\n//[{number:17, TextValue:{ Ordinal:'seventeenth'}, NumericValue:{ Ordinal:'17th'}} ]",
        "returns": "array"
      },
      "noDates": {
        "desc": "remove numbers that are also dates, like in 'June 5th 1999'.",
        "returns": "Text",
        "example": "nlp('in 2016, I’m going to party like it’s on sale for $19.99.').values().noDates().length\n//1"
      },
      "noUnits": {
        "desc": "remove 'books' from '12 books'",
        "returns": "Text",
        "example": "nlp('harry potter and the 12 sequels').values().noUnits().out()\n//'12'"
      },
      "toNumber": {
        "desc": "turn a written number like `five thousand five hundred` into it's numerical form, like `5500`",
        "returns": "Text",
        "example": "nlp('ten things i hate about you').values().toNumber().all().out()\n//10 things i hate about you"
      },
      "toText": {
        "desc": "turn a number like `5,500` into it's textual form, like `five thousand five hundred`",
        "returns": "Text",
        "example": "nlp('10 things i hate about you').values().toText().all().out()\n//ten things i hate about you"
      },
      "toNice": {
        "desc": "turn a number into numerical form, but with nice commas, like `5,500`",
        "returns": "Text",
        "example": "nlp('five hundred sixty two thousand, four hundred and seven').values().toNice().all().out()\n//'562,407'"
      },
      "toCardinal": {
        "desc": "turn `fifth` into `five`, and `5th` into `5`",
        "returns": "Text",
        "example": "nlp('twenty-third of december').values().toCardinal().all().out()\n//23rd of december"
      },
      "toOrdinal": {
        "desc": "turn `five` into `fifth` and `5` into `5th`",
        "returns": "Text",
        "example": "nlp('three strikes').values().toOrdinal().all().nouns().toSingular().all().out()\n//third strike"
      },
      "numbers": {
        "desc": "return the actual javascript integers (or floats)",
        "returns": "Array",
        "example": "nlp('at the seven eleven').values().numbers()\n// [7, 11]"
      },
      "greaterThan": {
        "desc": "return only the values larger than a given value",
        "returns": "Text",
        "example": "nlp('seven peaches weigh ten kilograms').values().greaterThan(7).out('array')\n// ['10']"
      },
      "lessThan": {
        "desc": "return only the values smaller than a given value",
        "returns": "Text",
        "example": "nlp('he is 7 years old').values().greaterThan('five').out('array')\n// ['7']"
      },
      "between": {
        "desc": "return values between a max and min - wrapper of .greaterThan(min).lessThan(max)",
        "returns": "Text",
        "example": "nlp('seven peaches weigh ten kilograms').values().between(8, 12).out('array')\n// ['7']"
      },
      "isEqual": {
        "desc": "return only the values equal to a given value",
        "returns": "Text",
        "example": "nlp('his 7th birthday').values().isEqual(7).out('array')\n// ['7th']"
      },
      "add": {
        "desc": "increment the current number by a given integer",
        "returns": "Text",
        "example": "nlp('his 7th birthday').values().add(2).out()\n// 'his 9th birthday'"
      },
      "subtract": {
        "desc": "subtract the current number by a given integer",
        "returns": "Text",
        "example": "nlp('his seventh birthday').values().subtract(2).out()\n// 'his fifth birthday'"
      },
      "increment": {
        "desc": "add one to the current number",
        "returns": "Text",
        "example": "nlp('his seventh birthday').values().increment().out()\n// 'his eighth birthday'"
      },
      "decrement": {
        "desc": "subtract one from the current number",
        "returns": "Text",
        "example": "nlp('his 7th birthday').values().decrement().out()\n// 'his 6th birthday'"
      }
    },
    "verbs": {
      "data": {
        "desc": "return a handy array of meta-data for the verbs and their auxillaries in this text",
        "example": "nlp('he will have been walking quickly').verbs().data()\n//[{verb:'walking', auxillary:'will have been', adverb:'quickly'}]\n",
        "returns": "array"
      },
      "conjugation": {
        "desc": "which form of is the verb in currently? PastTense, PresentTense, Infinitive, etc",
        "returns": "String",
        "example": "nlp('My cat’s breath smells like cat food').verbs().conjugation()\n//['PresentTense']\n"
      },
      "conjugate": {
        "desc": "blast-out all conjugated forms of these verbs",
        "returns": "Array",
        "example": "nlp('she walked the walk').verbs().conjugate()\n//[{Infinitive:'walk', ...}]\n"
      },
      "isSingular": {
        "desc": "return only the verbs that are singular, like 'is' but not 'are'",
        "returns": "Text",
        "example": "nlp('we were discussing Wittgenstein over a game of backgammon').verbs().isSingular().out('array')\n//[{text:'were discussing'}]\n"
      },
      "isPlural": {
        "desc": "return only the verbs that are plural, like 'are' but not 'is'",
        "returns": "Text",
        "example": "nlp('We were sitting in Barney’s car').verbs().isPlural().out('array')\n//[]\n"
      },
      "isPositive": {
        "desc": "return only the verbs that are not negative, like 'would sing' but not 'would not sing'",
        "returns": "Text",
        "example": "nlp('Dear Miss Hoover, you have Lyme disease.').verbs().isPositive().length\n    //1\n    "
      },
      "isNegative": {
        "desc": "return only the verbs that are negative, like 'would not sing' but not 'would sing'",
        "returns": "Text",
        "example": "nlp('Dear Miss Hoover, you have Lyme disease.').verbs().isNegative().length\n//0\n"
      },
      "toNegative": {
        "desc": "make the verbs mean the opposite thing - `walk`->`did not walk` etc",
        "returns": "Text",
        "example": "nlp('Dear Miss Hoover, you have Lyme disease.').verbs().toNegative().out()\n//do not have\n"
      },
      "toPositive": {
        "desc": "if the verb is negative, make it not negative",
        "returns": "Text",
        "example": "nlp('Dear Miss Hoover, you do not have Lyme disease').verbs().toPositive().out()\n//have\n"
      },
      "toPastTense": {
        "desc": "turn the verb into past tense - `walk`->`walked` etc.",
        "returns": "Text",
        "example": "nlp('It tastes like burning.').verbs().toPastTense().out()\n//tasted\n"
      },
      "toPresentTense": {
        "desc": "turn the verb into present tense - `walked`->`walks` etc.",
        "returns": "Text",
        "example": "nlp('you ate the sandwich?').verbs().toPresentTense().out()\n//you eat the sandwich?\n"
      },
      "toFutureTense": {
        "desc": "turn the verb into future tense - `walked`->`will walk` etc.",
        "returns": "Text",
        "example": "nlp('rock and/or roll').verbs().toGerund().out('array')\n//['rocking','rolling']"
      },
      "toGerund": {
        "desc": "turn the verb into 'continual' tense - `walked`->`walking` etc.",
        "returns": "Text",
        "example": "nlp('I’m a furniture! ').verbs().toFutureTense().out()\n//will be"
      },
      "asAdjective": {
        "desc": "conjugate the verb to its adjectival form - `walk`->`walkable`",
        "returns": "Array",
        "example": "nlp('strain').verbs().asAdjective()\n//strenuous"
      }
    },
    "acronyms": {
      "stripPeriods": {
        "desc": "turn 'FBI' into 'F.B.I.'",
        "returns": "Text",
        "example": "nlp('Director of the F.B.I.').acronyms().stripPeriods().out()\n//Director of the FBI"
      },
      "addPeriods": {
        "desc": "turn 'FBI' into 'F.B.I.'",
        "returns": "Text",
        "example": "nlp('Director of the FBI').acronyms().addPeriods().out()\n//Director of the F.B.I."
      },
      "data": {
        "desc": "return an array of meta-data for the acronyms in this text",
        "example": "nlp('In the USA, the big CIA. The Bloods and the Crips, and the KKK.').acronyms().data()\n//[{text:'USA'...}]",
        "returns": "array"
      }
    },
    "adjectives": {
      "data": {
        "desc": "return an array of meta-data for the adjectives and their adverbs",
        "example": "nlp('Guys, we have to assume our guns are useless. Throw them in the lake.').adjectives().data()\n//[{text:'useless'}]",
        "returns": "array"
      }
    },
    "adverbs": {
      "data": {
        "desc": "return an array of meta-data for the adverbs in this text",
        "example": "nlp('truly, madly, deeply').adverbs().data()\n//[{text:'truly'...}]",
        "returns": "array"
      }
    },
    "clauses": {
      "data": {
        "desc": "return an array of words split by sentence phrase (clause)",
        "example": "nlp('All right, Colossus, you’re free to go, but stay away from Death Mountain').clauses().data()\n//[{normal:'all right'}, {normal:'Colossus'}, {normal:'you're free to go'},]",
        "returns": "array"
      }
    },
    "hashTags": {
      "data": {
        "desc": "return an array of parsed hashtags used in the text",
        "example": "nlp('oh, but where is the #anykey').hashTags().data()\n//[{normal:'anykey'}]",
        "returns": "array"
      }
    },
    "startGrams": {
      "data": {
        "desc": "return an array of subsequences beginning at the start of each sentence or match",
        "example": "nlp('Who controls the British crown? Who keeps the metric system down?').startGrams().data()\n//[{normal:'who', size:1, count:2}...]",
        "returns": "array"
      }
    },
    "endGrams": {
      "data": {
        "desc": "return an array of subsequences ending at the end of each sentence or match",
        "example": "nlp('you think that’s a knife? I’ll show you a knife.').endGrams().data()\n//[{normal:'knife', count:2, size:1}...]",
        "returns": "array"
      }
    },
    "organizations": {
      "data": {
        "desc": "return an array of named-organizations in this text",
        "example": "nlp('Your dreams may vary from those of Globex Corporation, its subsidiaries and shareholders.').organizations().data()\n//[{text:'Globex Corporation'}]",
        "returns": "array"
      }
    },
    "phoneNumbers": {
      "data": {
        "desc": "return an array of parsed phonenumbers in this text",
        "example": "nlp('Moe Sizlak. That’s right. I’m a surgeon. (800) 555-0000.').phoneNumbers().data()\n//[{text:'(800) 555-0000'}]",
        "returns": "array"
      }
    },
    "places": {
      "data": {
        "desc": "return an array of locations mentioned in this text",
        "example": "nlp('you could still go to McGill, the Harvard of Canada!').places().data()\n//[{normal:'canada'}]",
        "returns": "array"
      }
    },
    "parentheses": {
      "data": {
        "desc": "return a list of phrases between ( ) brackets.",
        "example": "nlp('Use a pointed stick (a pencil) or a similar tool').parentheses().data()\n//[{text:'a pencil'}..]",
        "returns": "array"
      }
    },
    "questions": {
      "data": {
        "desc": "return an array of question sentences in this text",
        "example": "nlp('are you saying boo, or boo-urns?').questions().data().length\n//1",
        "returns": "array"
      }
    },
    "quotations": {
      "data": {
        "desc": "return an array of meta-data with the parsed quoations",
        "example": "nlp('the he said \"crazy like a fox!\".').quotations().data().length\n//1",
        "returns": "array"
      }
    },
    "statements": {
      "data": {
        "desc": "return an array of sentences that are not questions",
        "example": "nlp('i was saying boo-urns.').statements().data()\n//[{normal:'i was saying boo-urns'}]",
        "returns": "array"
      }
    },
    "terms": {
      "data": {
        "desc": "split all words into individual results, and return their metadata",
        "example": "nlp('we should all be more like little Ruttiger').terms().data()\n//[{text:'we'}, {text:'should'}...]",
        "returns": "array"
      }
    },
    "possessives": {
      "strip": {
        "desc": "grab all the things that are possessive, like \"Homer Simpson's\"",
        "example": "nlp('moe’s tavern').possessives().strip()\n//moe",
        "returns": "array"
      }
    },
    "topics": {
      "data": {
        "desc": "return the people, places, and organizations of this text",
        "example": "nlp('Hey everybody, I’m lookin’ for Amanda Hugginkiss').topics().data()\n//[{text:'Amanda Hugginkiss'}]",
        "returns": "array"
      }
    },
    "urls": {
      "data": {
        "desc": "return an array of urls mentioned in this text",
        "example": "nlp('👏 http://simpsons.wikia.com').urls().data()\n//[{text:'http://simpsons.wikia.com'}]",
        "returns": "array"
      }
    }
  }
}
