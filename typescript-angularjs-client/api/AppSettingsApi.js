"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var AppSettingsApi = /** @class */ (function () {
    function AppSettingsApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'https://app.quantimo.do/api';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     * Get the settings for your application configurable at https://build.quantimo.do
     * @summary Get client app settings
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @param clientSecret This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://builder.quantimo.do](https://builder.quantimo.do).
     */
    AppSettingsApi.prototype.getAppSettings = function (clientId, clientSecret, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/appSettings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        if (clientSecret !== undefined) {
            queryParameters['client_secret'] = clientSecret;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    AppSettingsApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return AppSettingsApi;
}());
exports.AppSettingsApi = AppSettingsApi;
//# sourceMappingURL=AppSettingsApi.js.map