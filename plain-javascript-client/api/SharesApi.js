/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetSharesResponse', 'model/ShareInvitationBody', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetSharesResponse'), require('../model/ShareInvitationBody'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.Quantimodo) {
      root.Quantimodo = {};
    }
    root.Quantimodo.SharesApi = factory(root.Quantimodo.ApiClient, root.Quantimodo.GetSharesResponse, root.Quantimodo.ShareInvitationBody, root.Quantimodo.User);
  }
}(this, function(ApiClient, GetSharesResponse, ShareInvitationBody, User) {
  'use strict';

  /**
   * Shares service.
   * @module api/SharesApi
   * @version 5.8.112511
   */

  /**
   * Constructs a new SharesApi. 
   * @alias module:api/SharesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteShare operation.
     * @callback module:api/SharesApi~deleteShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete share
     * Remove access to user data for a given client_id associated with a given individual, app, or study
     * @param {String} clientIdToRevoke Client id of the individual, study, or app that the user wishes to no longer have access to their data
     * @param {Object} opts Optional parameters
     * @param {String} opts.reason Ex: I hate you!
     * @param {module:model/String} opts.platform Ex: chrome, android, ios, web
     * @param {module:api/SharesApi~deleteShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.deleteShare = function(clientIdToRevoke, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientIdToRevoke' is set
      if (clientIdToRevoke === undefined || clientIdToRevoke === null) {
        throw new Error("Missing the required parameter 'clientIdToRevoke' when calling deleteShare");
      }


      var pathParams = {
      };
      var queryParams = {
        'clientIdToRevoke': clientIdToRevoke,
        'reason': opts['reason'],
        'platform': opts['platform'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/v3/shares/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShares operation.
     * @callback module:api/SharesApi~getSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSharesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorized Apps, Studies, and Individuals
     * This is a list of individuals, apps, or studies with access to your measurements.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.userId User&#39;s id
     * @param {String} opts.createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param {String} opts.updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param {String} opts.clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @param {String} opts.appVersion Ex: 2.1.1.0
     * @param {module:model/String} opts.platform Ex: chrome, android, ios, web
     * @param {String} opts.log Username or email
     * @param {String} opts.pwd User password
     * @param {module:api/SharesApi~getSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSharesResponse}
     */
    this.getShares = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'createdAt': opts['createdAt'],
        'updatedAt': opts['updatedAt'],
        'clientId': opts['clientId'],
        'appVersion': opts['appVersion'],
        'platform': opts['platform'],
        'log': opts['log'],
        'pwd': opts['pwd'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSharesResponse;

      return this.apiClient.callApi(
        '/v3/shares', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteShare operation.
     * @callback module:api/SharesApi~inviteShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete share
     * Invite someone to view your measurements
     * @param {module:model/ShareInvitationBody} body Details about person to share with
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.platform Ex: chrome, android, ios, web
     * @param {String} opts.clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @param {module:api/SharesApi~inviteShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.inviteShare = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inviteShare");
      }


      var pathParams = {
      };
      var queryParams = {
        'platform': opts['platform'],
        'clientId': opts['clientId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/v3/shares/invite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
