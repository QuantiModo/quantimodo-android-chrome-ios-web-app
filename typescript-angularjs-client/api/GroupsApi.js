"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var GroupsApi = /** @class */ (function () {
    function GroupsApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'https://app.quantimo.do/api';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     * Get Groups
     * @summary Get Groups
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param userId User&#39;s id
     * @param createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param id Id
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    GroupsApi.prototype.getGroups = function (sort, limit, offset, updatedAt, userId, createdAt, id, clientId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/groups';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (updatedAt !== undefined) {
            queryParameters['updatedAt'] = updatedAt;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (createdAt !== undefined) {
            queryParameters['createdAt'] = createdAt;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Get GroupsMembers
     * @summary Get GroupsMembers
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param userId User&#39;s id
     * @param createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param id Id
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    GroupsApi.prototype.getGroupsMembers = function (sort, limit, offset, updatedAt, userId, createdAt, id, clientId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/groupsMembers';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (updatedAt !== undefined) {
            queryParameters['updatedAt'] = updatedAt;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (createdAt !== undefined) {
            queryParameters['createdAt'] = createdAt;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Post Groups
     * @summary Post Groups
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param userId User&#39;s id
     * @param createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param id Id
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    GroupsApi.prototype.postGroups = function (sort, limit, offset, updatedAt, userId, createdAt, id, clientId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/groups';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (updatedAt !== undefined) {
            queryParameters['updatedAt'] = updatedAt;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (createdAt !== undefined) {
            queryParameters['createdAt'] = createdAt;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Post GroupsMembers
     * @summary Post GroupsMembers
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param userId User&#39;s id
     * @param createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param id Id
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    GroupsApi.prototype.postGroupsMembers = function (sort, limit, offset, updatedAt, userId, createdAt, id, clientId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/groupsMembers';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (updatedAt !== undefined) {
            queryParameters['updatedAt'] = updatedAt;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (createdAt !== undefined) {
            queryParameters['createdAt'] = createdAt;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    GroupsApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return GroupsApi;
}());
exports.GroupsApi = GroupsApi;
//# sourceMappingURL=GroupsApi.js.map