{"version":3,"sources":["../src/annyang.js"],"names":["root","factory","define","amd","annyang","module","exports","window","undefined","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","commandsList","recognition","callbacks","start","error","end","soundstart","result","resultMatch","resultNoMatch","errorNetwork","errorPermissionBlocked","errorPermissionDenied","autoRestart","lastStartedAt","autoRestartCount","debugState","debugStyle","pauseListening","isListening","optionalParam","optionalRegex","namedParam","splatParam","escapeRegExp","commandToRegExp","command","replace","match","optional","RegExp","invokeCallbacks","args","forEach","callback","apply","context","isInitialized","logMessage","text","extraParameters","indexOf","console","log","initIfNeeded","init","registerCommand","originalPhrase","push","parseResults","results","commandText","i","length","trim","j","l","currentCommand","exec","parameters","slice","commands","resetCommands","abort","maxAlternatives","continuous","location","protocol","lang","onstart","onsoundstart","onerror","event","Date","getTime","onend","timeSinceLastStart","setTimeout","paused","onresult","SpeechRecognitionResult","resultIndex","k","transcript","addCommands","options","e","message","pause","resume","debug","newState","setLanguage","language","cb","phrase","hasOwnProperty","regexp","source","removeCommands","commandsToRemove","Array","isArray","filter","addCallback","type","removeCallback","compareWithCallbackParameter","callbackType","getSpeechRecognizer","trigger","sentences"],"mappings":"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","file":"annyang.js","sourcesContent":["//! annyang\n//! version : 2.6.1\n//! author  : Tal Ater @TalAter\n//! license : MIT\n//! https://www.TalAter.com/annyang/\n(function (root, factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) { // AMD + global\n    define([], function () {\n      return (root.annyang = factory(root));\n    });\n  } else if (typeof module === 'object' && module.exports) { // CommonJS\n    module.exports = factory(root);\n  } else { // Browser globals\n    root.annyang = factory(root);\n  }\n}(typeof window !== 'undefined' ? window : this, function (root, undefined) {\n  'use strict';\n\n  /**\n   * # Quick Tutorial, Intro and Demos\n   *\n   * The quickest way to get started is to visit the [annyang homepage](https://www.talater.com/annyang/).\n   *\n   * For a more in-depth look at annyang, read on.\n   *\n   * # API Reference\n   */\n\n  var annyang;\n\n  // Get the SpeechRecognition object, while handling browser prefixes\n  var SpeechRecognition = root.SpeechRecognition ||\n                          root.webkitSpeechRecognition ||\n                          root.mozSpeechRecognition ||\n                          root.msSpeechRecognition ||\n                          root.oSpeechRecognition;\n\n  // Check browser support\n  // This is done as early as possible, to make it as fast as possible for unsupported browsers\n  if (!SpeechRecognition) {\n    return null;\n  }\n\n  var commandsList = [];\n  var recognition;\n  var callbacks = { start: [], error: [], end: [], soundstart: [], result: [], resultMatch: [], resultNoMatch: [], errorNetwork: [], errorPermissionBlocked: [], errorPermissionDenied: [] };\n  var autoRestart;\n  var lastStartedAt = 0;\n  var autoRestartCount = 0;\n  var debugState = false;\n  var debugStyle = 'font-weight: bold; color: #00f;';\n  var pauseListening = false;\n  var isListening = false;\n\n  // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\n  var optionalParam = /\\s*\\((.*?)\\)\\s*/g;\n  var optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#]/g;\n  var commandToRegExp = function(command) {\n    command = command.replace(escapeRegExp, '\\\\$&')\n                  .replace(optionalParam, '(?:$1)?')\n                  .replace(namedParam, function(match, optional) {\n                    return optional ? match : '([^\\\\s]+)';\n                  })\n                  .replace(splatParam, '(.*?)')\n                  .replace(optionalRegex, '\\\\s*$1?\\\\s*');\n    return new RegExp('^' + command + '$', 'i');\n  };\n\n  // This method receives an array of callbacks to iterate over, and invokes each of them\n  var invokeCallbacks = function(callbacks, ...args) {\n    callbacks.forEach(function(callback) {\n      callback.callback.apply(callback.context, args);\n    });\n  };\n\n  var isInitialized = function() {\n    return recognition !== undefined;\n  };\n\n  // method for logging in developer console when debug mode is on\n  var logMessage = function(text, extraParameters) {\n    if (text.indexOf('%c') === -1 && !extraParameters) {\n      console.log(text);\n    } else {\n      console.log(text, extraParameters || debugStyle);\n    }\n  };\n\n  var initIfNeeded = function() {\n    if (!isInitialized()) {\n      annyang.init({}, false);\n    }\n  };\n\n  var registerCommand = function(command, callback, originalPhrase) {\n    commandsList.push({ command, callback, originalPhrase });\n    if (debugState) {\n      logMessage('Command successfully loaded: %c'+originalPhrase, debugStyle);\n    }\n  };\n\n  var parseResults = function(results) {\n    invokeCallbacks(callbacks.result, results);\n    var commandText;\n    // go over each of the 5 results and alternative results received (we've set maxAlternatives to 5 above)\n    for (let i = 0; i<results.length; i++) {\n      // the text recognized\n      commandText = results[i].trim();\n      if (debugState) {\n        logMessage('Speech recognized: %c'+commandText, debugStyle);\n      }\n\n      // try and match recognized text to one of the commands on the list\n      for (let j = 0, l = commandsList.length; j < l; j++) {\n        var currentCommand = commandsList[j];\n        var result = currentCommand.command.exec(commandText);\n        if (result) {\n          var parameters = result.slice(1);\n          if (debugState) {\n            logMessage('command matched: %c'+currentCommand.originalPhrase, debugStyle);\n            if (parameters.length) {\n              logMessage('with parameters', parameters);\n            }\n          }\n          // execute the matched command\n          currentCommand.callback.apply(this, parameters);\n          invokeCallbacks(callbacks.resultMatch, commandText, currentCommand.originalPhrase, results);\n          return;\n        }\n      }\n    }\n    invokeCallbacks(callbacks.resultNoMatch, results);\n  };\n\n  annyang = {\n\n    /**\n     * Initialize annyang with a list of commands to recognize.\n     *\n     * #### Examples:\n     * ````javascript\n     * var commands = {'hello :name': helloFunction};\n     * var commands2 = {'hi': helloFunction};\n     *\n     * // initialize annyang, overwriting any previously added commands\n     * annyang.init(commands, true);\n     * // adds an additional command without removing the previous commands\n     * annyang.init(commands2, false);\n     * ````\n     * As of v1.1.0 it is no longer required to call init(). Just start() listening whenever you want, and addCommands() whenever, and as often as you like.\n     *\n     * @param {Object} commands - Commands that annyang should listen to\n     * @param {boolean} [resetCommands=true] - Remove all commands before initializing?\n     * @method init\n     * @deprecated\n     * @see [Commands Object](#commands-object)\n     */\n    init: function(commands, resetCommands = true) {\n      // Abort previous instances of recognition already running\n      if (recognition && recognition.abort) {\n        recognition.abort();\n      }\n\n      // initiate SpeechRecognition\n      recognition = new SpeechRecognition();\n\n      // Set the max number of alternative transcripts to try and match with a command\n      recognition.maxAlternatives = 5;\n\n      // In HTTPS, turn off continuous mode for faster results.\n      // In HTTP,  turn on  continuous mode for much slower results, but no repeating security notices\n      recognition.continuous = root.location.protocol === 'http:';\n\n      // Sets the language to the default 'en-US'. This can be changed with annyang.setLanguage()\n      recognition.lang = 'en-US';\n\n      recognition.onstart = function() {\n        isListening = true;\n        invokeCallbacks(callbacks.start);\n      };\n\n      recognition.onsoundstart = function() {\n        invokeCallbacks(callbacks.soundstart);\n      };\n\n      recognition.onerror = function(event) {\n        invokeCallbacks(callbacks.error, event);\n        switch (event.error) {\n        case 'network':\n          invokeCallbacks(callbacks.errorNetwork, event);\n          break;\n        case 'not-allowed':\n        case 'service-not-allowed':\n          // if permission to use the mic is denied, turn off auto-restart\n          autoRestart = false;\n          // determine if permission was denied by user or automatically.\n          if (new Date().getTime()-lastStartedAt < 200) {\n            invokeCallbacks(callbacks.errorPermissionBlocked, event);\n          } else {\n            invokeCallbacks(callbacks.errorPermissionDenied, event);\n          }\n          break;\n        }\n      };\n\n      recognition.onend = function() {\n        isListening = false;\n        invokeCallbacks(callbacks.end);\n        // annyang will auto restart if it is closed automatically and not by user action.\n        if (autoRestart) {\n          // play nicely with the browser, and never restart annyang automatically more than once per second\n          var timeSinceLastStart = new Date().getTime()-lastStartedAt;\n          autoRestartCount += 1;\n          if (autoRestartCount % 10 === 0) {\n            if (debugState) {\n              logMessage('Speech Recognition is repeatedly stopping and starting. See http://is.gd/annyang_restarts for tips.');\n            }\n          }\n          if (timeSinceLastStart < 1000) {\n            setTimeout(function() {\n              annyang.start({ paused: pauseListening });\n            }, 1000-timeSinceLastStart);\n          } else {\n            annyang.start({ paused: pauseListening });\n          }\n        }\n      };\n\n      recognition.onresult = function(event) {\n        if(pauseListening) {\n          if (debugState) {\n            logMessage('Speech heard, but annyang is paused');\n          }\n          return false;\n        }\n\n        // Map the results to an array\n        var SpeechRecognitionResult = event.results[event.resultIndex];\n        var results = [];\n        for (let k = 0; k<SpeechRecognitionResult.length; k++) {\n          results[k] = SpeechRecognitionResult[k].transcript;\n        }\n\n        parseResults(results);\n      };\n\n      // build commands list\n      if (resetCommands) {\n        commandsList = [];\n      }\n      if (commands.length) {\n        this.addCommands(commands);\n      }\n    },\n\n    /**\n     * Start listening.\n     * It's a good idea to call this after adding some commands first, but not mandatory.\n     *\n     * Receives an optional options object which supports the following options:\n     *\n     * - `autoRestart`  (boolean, default: true) Should annyang restart itself if it is closed indirectly, because of silence or window conflicts?\n     * - `continuous`   (boolean) Allow forcing continuous mode on or off. Annyang is pretty smart about this, so only set this if you know what you're doing.\n     * - `paused`       (boolean, default: true) Start annyang in paused mode.\n     *\n     * #### Examples:\n     * ````javascript\n     * // Start listening, don't restart automatically\n     * annyang.start({ autoRestart: false });\n     * // Start listening, don't restart automatically, stop recognition after first phrase recognized\n     * annyang.start({ autoRestart: false, continuous: false });\n     * ````\n     * @param {Object} [options] - Optional options.\n     * @method start\n     */\n    start: function(options) {\n      initIfNeeded();\n      options = options || {};\n      if (options.paused !== undefined) {\n        pauseListening = !!options.paused;\n      } else {\n        pauseListening = false;\n      }\n      if (options.autoRestart !== undefined) {\n        autoRestart = !!options.autoRestart;\n      } else {\n        autoRestart = true;\n      }\n      if (options.continuous !== undefined) {\n        recognition.continuous = !!options.continuous;\n      }\n\n      lastStartedAt = new Date().getTime();\n      try {\n        recognition.start();\n      } catch(e) {\n        if (debugState) {\n          logMessage(e.message);\n        }\n      }\n    },\n\n    /**\n     * Stop listening, and turn off mic.\n     *\n     * Alternatively, to only temporarily pause annyang responding to commands without stopping the SpeechRecognition engine or closing the mic, use pause() instead.\n     * @see [pause()](#pause)\n     *\n     * @method abort\n     */\n    abort: function() {\n      autoRestart = false;\n      autoRestartCount = 0;\n      if (isInitialized()) {\n        recognition.abort();\n      }\n    },\n\n    /**\n     * Pause listening. annyang will stop responding to commands (until the resume or start methods are called), without turning off the browser's SpeechRecognition engine or the mic.\n     *\n     * Alternatively, to stop the SpeechRecognition engine and close the mic, use abort() instead.\n     * @see [abort()](#abort)\n     *\n     * @method pause\n     */\n    pause: function() {\n      pauseListening = true;\n    },\n\n    /**\n     * Resumes listening and restores command callback execution when a result matches.\n     * If SpeechRecognition was aborted (stopped), start it.\n     *\n     * @method resume\n     */\n    resume: function() {\n      annyang.start();\n    },\n\n    /**\n     * Turn on output of debug messages to the console. Ugly, but super-handy!\n     *\n     * @param {boolean} [newState=true] - Turn on/off debug messages\n     * @method debug\n     */\n    debug: function(newState = true) {\n      debugState = !!newState;\n    },\n\n    /**\n     * Set the language the user will speak in. If this method is not called, defaults to 'en-US'.\n     *\n     * @param {String} language - The language (locale)\n     * @method setLanguage\n     * @see [Languages](https://github.com/TalAter/annyang/blob/master/docs/FAQ.md#what-languages-are-supported)\n     */\n    setLanguage: function(language) {\n      initIfNeeded();\n      recognition.lang = language;\n    },\n\n    /**\n     * Add commands that annyang will respond to. Similar in syntax to init(), but doesn't remove existing commands.\n     *\n     * #### Examples:\n     * ````javascript\n     * var commands = {'hello :name': helloFunction, 'howdy': helloFunction};\n     * var commands2 = {'hi': helloFunction};\n     *\n     * annyang.addCommands(commands);\n     * annyang.addCommands(commands2);\n     * // annyang will now listen to all three commands\n     * ````\n     *\n     * @param {Object} commands - Commands that annyang should listen to\n     * @method addCommands\n     * @see [Commands Object](#commands-object)\n     */\n    addCommands: function(commands) {\n      var cb;\n\n      initIfNeeded();\n\n      for (let phrase in commands) {\n        if (commands.hasOwnProperty(phrase)) {\n          cb = root[commands[phrase]] || commands[phrase];\n          if (typeof cb === 'function') {\n            // convert command to regex then register the command\n            registerCommand(commandToRegExp(phrase), cb, phrase);\n          } else if (typeof cb === 'object' && cb.regexp instanceof RegExp) {\n            // register the command\n            registerCommand(new RegExp(cb.regexp.source, 'i'), cb.callback, phrase);\n          } else {\n            if (debugState) {\n              logMessage('Can not register command: %c'+phrase, debugStyle);\n            }\n            continue;\n          }\n        }\n      }\n    },\n\n    /**\n     * Remove existing commands. Called with a single phrase, array of phrases, or methodically. Pass no params to remove all commands.\n     *\n     * #### Examples:\n     * ````javascript\n     * var commands = {'hello': helloFunction, 'howdy': helloFunction, 'hi': helloFunction};\n     *\n     * // Remove all existing commands\n     * annyang.removeCommands();\n     *\n     * // Add some commands\n     * annyang.addCommands(commands);\n     *\n     * // Don't respond to hello\n     * annyang.removeCommands('hello');\n     *\n     * // Don't respond to howdy or hi\n     * annyang.removeCommands(['howdy', 'hi']);\n     * ````\n     * @param {String|Array|Undefined} [commandsToRemove] - Commands to remove\n     * @method removeCommands\n     */\n    removeCommands: function(commandsToRemove) {\n      if (commandsToRemove === undefined) {\n        commandsList = [];\n      } else {\n        commandsToRemove = Array.isArray(commandsToRemove) ? commandsToRemove : [commandsToRemove];\n        commandsList = commandsList.filter(command => {\n          for (let i = 0; i<commandsToRemove.length; i++) {\n            if (commandsToRemove[i] === command.originalPhrase) {\n              return false;\n            }\n          }\n          return true;\n        });\n      }\n    },\n\n    /**\n     * Add a callback function to be called in case one of the following events happens:\n     *\n     * * `start` - Fired as soon as the browser's Speech Recognition engine starts listening\n     * * `soundstart` - Fired as soon as any sound (possibly speech) has been detected.\n     *     This will fire once per Speech Recognition starting. See https://is.gd/annyang_sound_start\n     * * `error` - Fired when the browser's Speech Recogntion engine returns an error, this generic error callback will be followed by more accurate error callbacks (both will fire if both are defined)\n     *     Callback function will be called with the error event as the first argument\n     * * `errorNetwork` - Fired when Speech Recognition fails because of a network error\n     *     Callback function will be called with the error event as the first argument\n     * * `errorPermissionBlocked` - Fired when the browser blocks the permission request to use Speech Recognition.\n     *     Callback function will be called with the error event as the first argument\n     * * `errorPermissionDenied` - Fired when the user blocks the permission request to use Speech Recognition.\n     *     Callback function will be called with the error event as the first argument\n     * * `end` - Fired when the browser's Speech Recognition engine stops\n     * * `result` - Fired as soon as some speech was identified. This generic callback will be followed by either the `resultMatch` or `resultNoMatch` callbacks.\n     *     Callback functions for to this event will be called with an array of possible phrases the user said as the first argument\n     * * `resultMatch` - Fired when annyang was able to match between what the user said and a registered command\n     *     Callback functions for this event will be called with three arguments in the following order:\n     *       * The phrase the user said that matched a command\n     *       * The command that was matched\n     *       * An array of possible alternative phrases the user might have said\n     * * `resultNoMatch` - Fired when what the user said didn't match any of the registered commands.\n     *     Callback functions for this event will be called with an array of possible phrases the user might've said as the first argument\n     *\n     * #### Examples:\n     * ````javascript\n     * annyang.addCallback('error', function() {\n     *   $('.myErrorText').text('There was an error!');\n     * });\n     *\n     * annyang.addCallback('resultMatch', function(userSaid, commandText, phrases) {\n     *   console.log(userSaid); // sample output: 'hello'\n     *   console.log(commandText); // sample output: 'hello (there)'\n     *   console.log(phrases); // sample output: ['hello', 'halo', 'yellow', 'polo', 'hello kitty']\n     * });\n     *\n     * // pass local context to a global function called notConnected\n     * annyang.addCallback('errorNetwork', notConnected, this);\n     * ````\n     * @param {String} type - Name of event that will trigger this callback\n     * @param {Function} callback - The function to call when event is triggered\n     * @param {Object} [context] - Optional context for the callback function\n     * @method addCallback\n     */\n    addCallback: function(type, callback, context) {\n      var cb = root[callback] || callback;\n      if (typeof cb === 'function' && callbacks[type] !== undefined) {\n        callbacks[type].push({callback: cb, context: context || this});\n      }\n    },\n\n    /**\n     * Remove callbacks from events.\n     *\n     * - Pass an event name and a callback command to remove that callback command from that event type.\n     * - Pass just an event name to remove all callback commands from that event type.\n     * - Pass undefined as event name and a callback command to remove that callback command from all event types.\n     * - Pass no params to remove all callback commands from all event types.\n     *\n     * #### Examples:\n     * ````javascript\n     * annyang.addCallback('start', myFunction1);\n     * annyang.addCallback('start', myFunction2);\n     * annyang.addCallback('end', myFunction1);\n     * annyang.addCallback('end', myFunction2);\n     *\n     * // Remove all callbacks from all events:\n     * annyang.removeCallback();\n     *\n     * // Remove all callbacks attached to end event:\n     * annyang.removeCallback('end');\n     *\n     * // Remove myFunction2 from being called on start:\n     * annyang.removeCallback('start', myFunction2);\n     *\n     * // Remove myFunction1 from being called on all events:\n     * annyang.removeCallback(undefined, myFunction1);\n     * ````\n     *\n     * @param type Name of event type to remove callback from\n     * @param callback The callback function to remove\n     * @returns undefined\n     * @method removeCallback\n     */\n    removeCallback: function(type, callback) {\n      var compareWithCallbackParameter = function(cb) {\n        return cb.callback !== callback;\n      };\n      // Go over each callback type in callbacks store object\n      for (let callbackType in callbacks) {\n        if (callbacks.hasOwnProperty(callbackType)) {\n          // if this is the type user asked to delete, or he asked to delete all, go ahead.\n          if (type === undefined || type === callbackType) {\n            // If user asked to delete all callbacks in this type or all types\n            if (callback === undefined) {\n              callbacks[callbackType] = [];\n            } else {\n              // Remove all matching callbacks\n              callbacks[callbackType] = callbacks[callbackType].filter(compareWithCallbackParameter);\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns true if speech recognition is currently on.\n     * Returns false if speech recognition is off or annyang is paused.\n     *\n     * @return boolean true = SpeechRecognition is on and annyang is listening\n     * @method isListening\n     */\n    isListening: function() {\n      return isListening && !pauseListening;\n    },\n\n    /**\n     * Returns the instance of the browser's SpeechRecognition object used by annyang.\n     * Useful in case you want direct access to the browser's Speech Recognition engine.\n     *\n     * @returns SpeechRecognition The browser's Speech Recognizer currently used by annyang\n     * @method getSpeechRecognizer\n     */\n    getSpeechRecognizer: function() {\n      return recognition;\n    },\n\n    /**\n     * Simulate speech being recognized. This will trigger the same events and behavior as when the Speech Recognition\n     * detects speech.\n     *\n     * Can accept either a string containing a single sentence, or an array containing multiple sentences to be checked\n     * in order until one of them matches a command (similar to the way Speech Recognition Alternatives are parsed)\n     *\n     * #### Examples:\n     * ````javascript\n     * annyang.trigger('Time for some thrilling heroics');\n     * annyang.trigger(\n     *     ['Time for some thrilling heroics', 'Time for some thrilling aerobics']\n     *   );\n     * ````\n     *\n     * @param string|array sentences A sentence as a string or an array of strings of possible sentences\n     * @returns undefined\n     * @method trigger\n     */\n    trigger: function(sentences) {\n      if(!annyang.isListening()) {\n        if (debugState) {\n          if (!isListening) {\n            logMessage('Cannot trigger while annyang is aborted');\n          } else {\n            logMessage('Speech heard, but annyang is paused');\n          }\n        }\n        return;\n      }\n\n      if (!Array.isArray(sentences)) {\n        sentences = [sentences];\n      }\n\n      parseResults(sentences);\n    }\n  };\n\n  return annyang;\n\n}));\n\n/**\n * # Good to Know\n *\n * ## Commands Object\n *\n * Both the [init()]() and addCommands() methods receive a `commands` object.\n *\n * annyang understands commands with `named variables`, `splats`, and `optional words`.\n *\n * * Use `named variables` for one word arguments in your command.\n * * Use `splats` to capture multi-word text at the end of your command (greedy).\n * * Use `optional words` or phrases to define a part of the command as optional.\n *\n * #### Examples:\n * ````html\n * <script>\n * var commands = {\n *   // annyang will capture anything after a splat (*) and pass it to the function.\n *   // e.g. saying \"Show me Batman and Robin\" will call showFlickr('Batman and Robin');\n *   'show me *tag': showFlickr,\n *\n *   // A named variable is a one word variable, that can fit anywhere in your command.\n *   // e.g. saying \"calculate October stats\" will call calculateStats('October');\n *   'calculate :month stats': calculateStats,\n *\n *   // By defining a part of the following command as optional, annyang will respond\n *   // to both: \"say hello to my little friend\" as well as \"say hello friend\"\n *   'say hello (to my little) friend': greeting\n * };\n *\n * var showFlickr = function(tag) {\n *   var url = 'http://api.flickr.com/services/rest/?tags='+tag;\n *   $.getJSON(url);\n * }\n *\n * var calculateStats = function(month) {\n *   $('#stats').text('Statistics for '+month);\n * }\n *\n * var greeting = function() {\n *   $('#greeting').text('Hello!');\n * }\n * </script>\n * ````\n *\n * ### Using Regular Expressions in commands\n * For advanced commands, you can pass a regular expression object, instead of\n * a simple string command.\n *\n * This is done by passing an object containing two properties: `regexp`, and\n * `callback` instead of the function.\n *\n * #### Examples:\n * ````javascript\n * var calculateFunction = function(month) { console.log(month); }\n * var commands = {\n *   // This example will accept any word as the \"month\"\n *   'calculate :month stats': calculateFunction,\n *   // This example will only accept months which are at the start of a quarter\n *   'calculate :quarter stats': {'regexp': /^calculate (January|April|July|October) stats$/, 'callback': calculateFunction}\n * }\n ````\n *\n */\n"]}