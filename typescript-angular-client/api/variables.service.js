"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var encoder_1 = require("../encoder");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var VariablesService = /** @class */ (function () {
    function VariablesService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://app.quantimo.do/api';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    VariablesService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    VariablesService.prototype.deleteUserTag = function (taggedVariableId, tagVariableId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (taggedVariableId !== undefined && taggedVariableId !== null) {
            queryParameters = queryParameters.set('taggedVariableId', taggedVariableId);
        }
        if (tagVariableId !== undefined && tagVariableId !== null) {
            queryParameters = queryParameters.set('tagVariableId', tagVariableId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.delete(this.basePath + "/v3/userTags/delete", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.deleteUserVariable = function (variableId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling deleteUserVariable.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.delete(this.basePath + "/v3/userVariables/delete", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.getVariableCategories = function (observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/variableCategories", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.getVariables = function (includeCharts, numberOfRawMeasurements, userId, variableCategoryName, name, variableName, updatedAt, sourceName, earliestMeasurementTime, latestMeasurementTime, id, lastSourceName, limit, offset, sort, includePublic, manualTracking, clientId, upc, effectOrCause, publicEffectOrCause, exactMatch, variableCategoryId, includePrivate, searchPhrase, synonyms, taggedVariableId, tagVariableId, joinVariableId, parentUserTagVariableId, childUserTagVariableId, ingredientUserTagVariableId, ingredientOfUserTagVariableId, commonOnly, userOnly, includeTags, recalculate, variableId, concise, refresh, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (includeCharts !== undefined && includeCharts !== null) {
            queryParameters = queryParameters.set('includeCharts', includeCharts);
        }
        if (numberOfRawMeasurements !== undefined && numberOfRawMeasurements !== null) {
            queryParameters = queryParameters.set('numberOfRawMeasurements', numberOfRawMeasurements);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (variableCategoryName !== undefined && variableCategoryName !== null) {
            queryParameters = queryParameters.set('variableCategoryName', variableCategoryName);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', name);
        }
        if (variableName !== undefined && variableName !== null) {
            queryParameters = queryParameters.set('variableName', variableName);
        }
        if (updatedAt !== undefined && updatedAt !== null) {
            queryParameters = queryParameters.set('updatedAt', updatedAt);
        }
        if (sourceName !== undefined && sourceName !== null) {
            queryParameters = queryParameters.set('sourceName', sourceName);
        }
        if (earliestMeasurementTime !== undefined && earliestMeasurementTime !== null) {
            queryParameters = queryParameters.set('earliestMeasurementTime', earliestMeasurementTime);
        }
        if (latestMeasurementTime !== undefined && latestMeasurementTime !== null) {
            queryParameters = queryParameters.set('latestMeasurementTime', latestMeasurementTime);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', id);
        }
        if (lastSourceName !== undefined && lastSourceName !== null) {
            queryParameters = queryParameters.set('lastSourceName', lastSourceName);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', sort);
        }
        if (includePublic !== undefined && includePublic !== null) {
            queryParameters = queryParameters.set('includePublic', includePublic);
        }
        if (manualTracking !== undefined && manualTracking !== null) {
            queryParameters = queryParameters.set('manualTracking', manualTracking);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (upc !== undefined && upc !== null) {
            queryParameters = queryParameters.set('upc', upc);
        }
        if (effectOrCause !== undefined && effectOrCause !== null) {
            queryParameters = queryParameters.set('effectOrCause', effectOrCause);
        }
        if (publicEffectOrCause !== undefined && publicEffectOrCause !== null) {
            queryParameters = queryParameters.set('publicEffectOrCause', publicEffectOrCause);
        }
        if (exactMatch !== undefined && exactMatch !== null) {
            queryParameters = queryParameters.set('exactMatch', exactMatch);
        }
        if (variableCategoryId !== undefined && variableCategoryId !== null) {
            queryParameters = queryParameters.set('variableCategoryId', variableCategoryId);
        }
        if (includePrivate !== undefined && includePrivate !== null) {
            queryParameters = queryParameters.set('includePrivate', includePrivate);
        }
        if (searchPhrase !== undefined && searchPhrase !== null) {
            queryParameters = queryParameters.set('searchPhrase', searchPhrase);
        }
        if (synonyms !== undefined && synonyms !== null) {
            queryParameters = queryParameters.set('synonyms', synonyms);
        }
        if (taggedVariableId !== undefined && taggedVariableId !== null) {
            queryParameters = queryParameters.set('taggedVariableId', taggedVariableId);
        }
        if (tagVariableId !== undefined && tagVariableId !== null) {
            queryParameters = queryParameters.set('tagVariableId', tagVariableId);
        }
        if (joinVariableId !== undefined && joinVariableId !== null) {
            queryParameters = queryParameters.set('joinVariableId', joinVariableId);
        }
        if (parentUserTagVariableId !== undefined && parentUserTagVariableId !== null) {
            queryParameters = queryParameters.set('parentUserTagVariableId', parentUserTagVariableId);
        }
        if (childUserTagVariableId !== undefined && childUserTagVariableId !== null) {
            queryParameters = queryParameters.set('childUserTagVariableId', childUserTagVariableId);
        }
        if (ingredientUserTagVariableId !== undefined && ingredientUserTagVariableId !== null) {
            queryParameters = queryParameters.set('ingredientUserTagVariableId', ingredientUserTagVariableId);
        }
        if (ingredientOfUserTagVariableId !== undefined && ingredientOfUserTagVariableId !== null) {
            queryParameters = queryParameters.set('ingredientOfUserTagVariableId', ingredientOfUserTagVariableId);
        }
        if (commonOnly !== undefined && commonOnly !== null) {
            queryParameters = queryParameters.set('commonOnly', commonOnly);
        }
        if (userOnly !== undefined && userOnly !== null) {
            queryParameters = queryParameters.set('userOnly', userOnly);
        }
        if (includeTags !== undefined && includeTags !== null) {
            queryParameters = queryParameters.set('includeTags', includeTags);
        }
        if (recalculate !== undefined && recalculate !== null) {
            queryParameters = queryParameters.set('recalculate', recalculate);
        }
        if (variableId !== undefined && variableId !== null) {
            queryParameters = queryParameters.set('variableId', variableId);
        }
        if (concise !== undefined && concise !== null) {
            queryParameters = queryParameters.set('concise', concise);
        }
        if (refresh !== undefined && refresh !== null) {
            queryParameters = queryParameters.set('refresh', refresh);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/variables", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.postUserTags = function (body, userId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postUserTags.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(this.basePath + "/v3/userTags", body, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.postUserVariables = function (userVariables, includePrivate, clientId, includePublic, searchPhrase, exactMatch, manualTracking, variableCategoryName, variableCategoryId, synonyms, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (userVariables === null || userVariables === undefined) {
            throw new Error('Required parameter userVariables was null or undefined when calling postUserVariables.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (includePrivate !== undefined && includePrivate !== null) {
            queryParameters = queryParameters.set('includePrivate', includePrivate);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (includePublic !== undefined && includePublic !== null) {
            queryParameters = queryParameters.set('includePublic', includePublic);
        }
        if (searchPhrase !== undefined && searchPhrase !== null) {
            queryParameters = queryParameters.set('searchPhrase', searchPhrase);
        }
        if (exactMatch !== undefined && exactMatch !== null) {
            queryParameters = queryParameters.set('exactMatch', exactMatch);
        }
        if (manualTracking !== undefined && manualTracking !== null) {
            queryParameters = queryParameters.set('manualTracking', manualTracking);
        }
        if (variableCategoryName !== undefined && variableCategoryName !== null) {
            queryParameters = queryParameters.set('variableCategoryName', variableCategoryName);
        }
        if (variableCategoryId !== undefined && variableCategoryId !== null) {
            queryParameters = queryParameters.set('variableCategoryId', variableCategoryId);
        }
        if (synonyms !== undefined && synonyms !== null) {
            queryParameters = queryParameters.set('synonyms', synonyms);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(this.basePath + "/v3/variables", userVariables, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService.prototype.resetUserVariableSettings = function (variableId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling resetUserVariableSettings.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(this.basePath + "/v3/userVariables/reset", variableId, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    VariablesService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
    ], VariablesService);
    return VariablesService;
}());
exports.VariablesService = VariablesService;
