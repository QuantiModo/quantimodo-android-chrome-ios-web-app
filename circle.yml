# Customize the test machine
machine:
  ruby:
    version: 2.4.1
  java:
    version: oraclejdk8
  node:
    version: 6.1.0
  environment:
    _JAVA_OPTIONS: "-Xms512m -Xmx1024m" # Appears to solve "Your build has exceeded the memory limit of 4G on 1 container"
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'  # Did not solve "Your build has exceeded the memory limit of 4G on 1 container"

checkout:
  post:
    - git submodule sync --recursive
    - git submodule update --recursive --init # use submodules
    - chmod -R +x scripts
    - chmod +x -R hooks/*
    - cp -r android-licenses/. $ANDROID_HOME/licenses
    - git fetch --all --unshallow || true
    - chmod 777 -R $PWD

# Customize dependencies
dependencies:
  post:
    #- wget https://saucelabs.com/downloads/sc-latest-linux.tar.gz
    #- tar -xzf sc-latest-linux.tar.gz
  pre:
    - ruby -v
    - mkdir node_modules || true # must exist prior to override to cache
    - mkdir platforms || true # must exist prior to override to cache
    - mkdir plugins || true # must exist prior to override to cache
    - mkdir src/lib || true # must exist prior to override to cache
    - "[[ ! -s \"$(git rev-parse --git-dir)/shallow\" ]] || git fetch --unshallow"
#    - "curl -X POST --data-urlencode 'payload={\"channel\": \"#web\", \"username\": \"CircleCI\", \"text\": \"Branch $CIRCLE_BRANCH has just been deployed to Heroku and is being tested by GhostInspector. You'll have to go here (https://github.com/mikepsinn/QM-Docker/commits/develop) to look up which branch this is using the version number above until someone figures out how to include $CIRCLE_BRANCH in this message in circle.yml.  \", \"icon_emoji\": \":ghost:\"}' https://hooks.slack.com/services/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"

  override:
    #- if [[ $CIRCLE_BRANCH == *"feature"* ]]; then sudo apt-add-repository -y ppa:duggan/bats; fi  # Avoid conflicting simultaneous GI testing
    #- if [[ $CIRCLE_BRANCH == *"feature"* ]]; then sudo apt-get update; sudo apt-get install -y bats; fi # Avoid conflicting simultaneous GI testing
    #- if [[ $CIRCLE_BRANCH == *"feature"* ]]; then curl -L -o ~/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5rc1/jq-linux-x86_64-static && chmod +x ~/bin/jq; fi  # Avoid conflicting simultaneous GI testing

    - if [[ $CIRCLE_BRANCH != *"feature"* ]]; then sudo apt-get update; sudo apt-get install tree imagemagick; fi
    - if [[ $CIRCLE_BRANCH != *"feature"* ]]; then npm install -g gulp cordova@6.5.0 ionic@2.2.3 bower cordova-hot-code-push-cli; fi
    - if [[ $CIRCLE_BRANCH != *"feature"* ]]; then npm install; fi
    #- if [[ $CIRCLE_BRANCH != *"feature"* ]]; then gulp prepareRepositoryForAndroidWithoutCleaning; fi
    #- if [[ $CIRCLE_BRANCH != *"feature"* ]]; then gulp prepareRepositoryForAndroid; fi  # Done in gulpBuildAllAndroidApps
    - if [[ $CIRCLE_BRANCH != *"feature"* ]]; then gem install fastlane; fi # Don't use sudo or it uses old ruby version
    #- if [[ $CIRCLE_BRANCH != *"feature"* ]]; then gulp prepareRepositoryForAndroid; fi

  cache_directories:
    - node_modules   # Probably don't want to cache node_modules so we catch problematic dependency changes
    - platforms
    - plugins
    - src/lib
    - /opt/circleci/nodejs/v4.2.6/bin
    - /opt/circleci/nodejs/v4.2.6/lib/node_modules

test:
  override:
    - echo "This line is to prevent automatic test detection."

general:
  branches:
    ignore:
      - gh-pages # list of branches to ignore
      - develop
      - master
      - /release\/.*/ # or ignore regexes
      - /feature\/.*/ # or ignore regexes
  artifacts:
    - "platforms/android/build/outputs/apk"
    - "plugins/de.appplant.cordova.plugin.local-notification"
    - "plugins/cordova-plugin-local-notifications"
    #- "dropbox"

deployment:
  medimodo:
    branch: medimodo
    commands:
      - git push git@heroku.com:medimodo.git $CIRCLE_SHA1:refs/heads/master --force
  build:
    branch: /apps\/.*/
    commands:
      - gulp buildChromeExtension # Build Chrome first in case Android upload fails
      - gulp buildAndroidApp
  feature:
    branch: /feature\/.*/
    commands:
      #- chmod +x do-exclusively
      #- ./do-exclusively git push git@heroku.com:medimodo.git $CIRCLE_SHA1:refs/heads/master --force
      - git push git@heroku.com:medimodo.git $CIRCLE_SHA1:refs/heads/master --force
      - curl "https://api.ghostinspector.com/v1/suites/56f5b92519d90d942760ea96/execute/?startUrl=https://medimodo.herokuapp.com&clientId=oauth_test_client&apiKey=f5b531ccd55da08abf35fadabd7b7b04f3d64312&commit="$(git rev-parse HEAD) > ghostinspector.json
      - php ghostinspector_parser.php
  pull:
    branch: /pull\/.*/
    commands:
      #- chmod +x do-exclusively
      #- ./do-exclusively git push git@heroku.com:qm-ionic.git $CIRCLE_SHA1:refs/heads/master --force
      - git push git@heroku.com:medimodo.git $CIRCLE_SHA1:refs/heads/master --force
      - curl "https://api.ghostinspector.com/v1/suites/56f5b92519d90d942760ea96/execute/?startUrl=https://medimodo.herokuapp.com&clientId=oauth_test_client&apiKey=f5b531ccd55da08abf35fadabd7b7b04f3d64312&commit="$(git rev-parse HEAD) > ghostinspector.json
      - php ghostinspector_parser.php
  staging:
    branch: develop
    commands:
      - gulp _build-all-chrome # Build Chrome first in case Android upload fails
      - gulp buildAllAndroidAppsWithCleaning
      - gulp mergeToMasterAndTriggerRebuildsForAllApps
  production:
    branch: master
    commands:
      - gulp buildChromeExtension
      - gulp prepareRepositoryForAndroid # Clean and build master to double check that fresh non-cached builds don't fail
      - gulp buildAndroidApp
      #- gulp fastlaneSupplyProduction
      #- cp platforms/android/build/outputs/apk/* $CIRCLE_ARTIFACTS
