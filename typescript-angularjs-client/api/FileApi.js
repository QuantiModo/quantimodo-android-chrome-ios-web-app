"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112513
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var FileApi = /** @class */ (function () {
    function FileApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'https://local.quantimo.do/api';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     * Get File
     * @summary Get File
     * @param userId User&#39;s id
     * @param id Id
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    FileApi.prototype.getFile = function (userId, id, clientId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v2/file';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Post File
     * @summary Post File
     * @param file The file to upload.
     * @param note Description of file contents.
     */
    FileApi.prototype.postFile = function (file, note, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v2/file';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling postFile.');
        }
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        formParams['file'] = file;
        formParams['note'] = note;
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    FileApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return FileApi;
}());
exports.FileApi = FileApi;
