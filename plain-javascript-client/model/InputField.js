/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Button'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Button'));
  } else {
    // Browser globals (root is window)
    if (!root.Quantimodo) {
      root.Quantimodo = {};
    }
    root.Quantimodo.InputField = factory(root.Quantimodo.ApiClient, root.Quantimodo.Button);
  }
}(this, function(ApiClient, Button) {
  'use strict';




  /**
   * The InputField model module.
   * @module model/InputField
   * @version 5.8.112511
   */

  /**
   * Constructs a new <code>InputField</code>.
   * @alias module:model/InputField
   * @class
   * @param displayName {String} What do you expect?
   * @param type {module:model/InputField.TypeEnum} Ex: Title
   */
  var exports = function(displayName, type) {
    var _this = this;

    _this['displayName'] = displayName;



















    _this['type'] = type;


  };

  /**
   * Constructs a <code>InputField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InputField} obj Optional instance to populate.
   * @return {module:model/InputField} The populated <code>InputField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('displayName')) {
        obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
      }
      if (data.hasOwnProperty('helpText')) {
        obj['helpText'] = ApiClient.convertToType(data['helpText'], 'String');
      }
      if (data.hasOwnProperty('hint')) {
        obj['hint'] = ApiClient.convertToType(data['hint'], 'String');
      }
      if (data.hasOwnProperty('icon')) {
        obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('image')) {
        obj['image'] = ApiClient.convertToType(data['image'], 'String');
      }
      if (data.hasOwnProperty('key')) {
        obj['key'] = ApiClient.convertToType(data['key'], 'String');
      }
      if (data.hasOwnProperty('labelLeft')) {
        obj['labelLeft'] = ApiClient.convertToType(data['labelLeft'], 'String');
      }
      if (data.hasOwnProperty('labelRight')) {
        obj['labelRight'] = ApiClient.convertToType(data['labelRight'], 'String');
      }
      if (data.hasOwnProperty('link')) {
        obj['link'] = ApiClient.convertToType(data['link'], 'String');
      }
      if (data.hasOwnProperty('maxLength')) {
        obj['maxLength'] = ApiClient.convertToType(data['maxLength'], 'Number');
      }
      if (data.hasOwnProperty('maxValue')) {
        obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
      }
      if (data.hasOwnProperty('minLength')) {
        obj['minLength'] = ApiClient.convertToType(data['minLength'], 'Number');
      }
      if (data.hasOwnProperty('minValue')) {
        obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], ['String']);
      }
      if (data.hasOwnProperty('placeholder')) {
        obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
      }
      if (data.hasOwnProperty('postUrl')) {
        obj['postUrl'] = ApiClient.convertToType(data['postUrl'], 'String');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('show')) {
        obj['show'] = ApiClient.convertToType(data['show'], 'Boolean');
      }
      if (data.hasOwnProperty('submitButton')) {
        obj['submitButton'] = Button.constructFromObject(data['submitButton']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('validationPattern')) {
        obj['validationPattern'] = ApiClient.convertToType(data['validationPattern'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
    }
    return obj;
  }

  /**
   * What do you expect?
   * @member {String} displayName
   */
  exports.prototype['displayName'] = undefined;
  /**
   * What do you expect?
   * @member {String} helpText
   */
  exports.prototype['helpText'] = undefined;
  /**
   * What do you expect?
   * @member {String} hint
   */
  exports.prototype['hint'] = undefined;
  /**
   * What do you expect?
   * @member {String} icon
   */
  exports.prototype['icon'] = undefined;
  /**
   * HTML element id
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * What do you expect?
   * @member {String} image
   */
  exports.prototype['image'] = undefined;
  /**
   * What do you expect?
   * @member {String} key
   */
  exports.prototype['key'] = undefined;
  /**
   * What do you expect?
   * @member {String} labelLeft
   */
  exports.prototype['labelLeft'] = undefined;
  /**
   * What do you expect?
   * @member {String} labelRight
   */
  exports.prototype['labelRight'] = undefined;
  /**
   * What do you expect?
   * @member {String} link
   */
  exports.prototype['link'] = undefined;
  /**
   * What do you expect?
   * @member {Number} maxLength
   */
  exports.prototype['maxLength'] = undefined;
  /**
   * What do you expect?
   * @member {Number} maxValue
   */
  exports.prototype['maxValue'] = undefined;
  /**
   * What do you expect?
   * @member {Number} minLength
   */
  exports.prototype['minLength'] = undefined;
  /**
   * What do you expect?
   * @member {Number} minValue
   */
  exports.prototype['minValue'] = undefined;
  /**
   * Selector list options
   * @member {Array.<String>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * Ex: Title
   * @member {String} placeholder
   */
  exports.prototype['placeholder'] = undefined;
  /**
   * What do you expect?
   * @member {String} postUrl
   */
  exports.prototype['postUrl'] = undefined;
  /**
   * What do you expect?
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * Ex: Title
   * @member {Boolean} show
   */
  exports.prototype['show'] = undefined;
  /**
   * @member {module:model/Button} submitButton
   */
  exports.prototype['submitButton'] = undefined;
  /**
   * Ex: Title
   * @member {module:model/InputField.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * See http://html5pattern.com/ for examples
   * @member {String} validationPattern
   */
  exports.prototype['validationPattern'] = undefined;
  /**
   * What do you expect?
   * @member {String} value
   */
  exports.prototype['value'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "check_box"
     * @const
     */
    "check_box": "check_box",
    /**
     * value: "date"
     * @const
     */
    "date": "date",
    /**
     * value: "email"
     * @const
     */
    "email": "email",
    /**
     * value: "number"
     * @const
     */
    "number": "number",
    /**
     * value: "postal_code"
     * @const
     */
    "postal_code": "postal_code",
    /**
     * value: "select_option"
     * @const
     */
    "select_option": "select_option",
    /**
     * value: "string"
     * @const
     */
    "string": "string",
    /**
     * value: "switch"
     * @const
     */
    "switch": "switch",
    /**
     * value: "text_area"
     * @const
     */
    "text_area": "text_area",
    /**
     * value: "unit"
     * @const
     */
    "unit": "unit",
    /**
     * value: "variable_category"
     * @const
     */
    "variable_category": "variable_category"  };


  return exports;
}));


