"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var encoder_1 = require("../encoder");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var StudiesService = /** @class */ (function () {
    function StudiesService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://app.quantimo.do/api';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    StudiesService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    StudiesService.prototype.createStudy = function (body, clientId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createStudy.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(this.basePath + "/v3/study/create", body, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.deleteVote = function (body, userId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteVote.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.delete(this.basePath + "/v3/votes/delete", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.getOpenStudies = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, userId, clientId, includeCharts, recalculate, studyId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (includeCharts !== undefined && includeCharts !== null) {
            queryParameters = queryParameters.set('includeCharts', includeCharts);
        }
        if (recalculate !== undefined && recalculate !== null) {
            queryParameters = queryParameters.set('recalculate', recalculate);
        }
        if (studyId !== undefined && studyId !== null) {
            queryParameters = queryParameters.set('studyId', studyId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/studies/open", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.getStudies = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, userId, clientId, includeCharts, recalculate, studyId, sort, limit, offset, correlationCoefficient, updatedAt, outcomesOfInterest, principalInvestigatorUserId, open, joined, created, population, downvoted, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (includeCharts !== undefined && includeCharts !== null) {
            queryParameters = queryParameters.set('includeCharts', includeCharts);
        }
        if (recalculate !== undefined && recalculate !== null) {
            queryParameters = queryParameters.set('recalculate', recalculate);
        }
        if (studyId !== undefined && studyId !== null) {
            queryParameters = queryParameters.set('studyId', studyId);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (correlationCoefficient !== undefined && correlationCoefficient !== null) {
            queryParameters = queryParameters.set('correlationCoefficient', correlationCoefficient);
        }
        if (updatedAt !== undefined && updatedAt !== null) {
            queryParameters = queryParameters.set('updatedAt', updatedAt);
        }
        if (outcomesOfInterest !== undefined && outcomesOfInterest !== null) {
            queryParameters = queryParameters.set('outcomesOfInterest', outcomesOfInterest);
        }
        if (principalInvestigatorUserId !== undefined && principalInvestigatorUserId !== null) {
            queryParameters = queryParameters.set('principalInvestigatorUserId', principalInvestigatorUserId);
        }
        if (open !== undefined && open !== null) {
            queryParameters = queryParameters.set('open', open);
        }
        if (joined !== undefined && joined !== null) {
            queryParameters = queryParameters.set('joined', joined);
        }
        if (created !== undefined && created !== null) {
            queryParameters = queryParameters.set('created', created);
        }
        if (population !== undefined && population !== null) {
            queryParameters = queryParameters.set('population', population);
        }
        if (downvoted !== undefined && downvoted !== null) {
            queryParameters = queryParameters.set('downvoted', downvoted);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/studies", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.getStudiesCreated = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, sort, limit, offset, userId, updatedAt, clientId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (updatedAt !== undefined && updatedAt !== null) {
            queryParameters = queryParameters.set('updatedAt', updatedAt);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/studies/created", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.getStudiesJoined = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, sort, limit, offset, userId, correlationCoefficient, updatedAt, outcomesOfInterest, clientId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (correlationCoefficient !== undefined && correlationCoefficient !== null) {
            queryParameters = queryParameters.set('correlationCoefficient', correlationCoefficient);
        }
        if (updatedAt !== undefined && updatedAt !== null) {
            queryParameters = queryParameters.set('updatedAt', updatedAt);
        }
        if (outcomesOfInterest !== undefined && outcomesOfInterest !== null) {
            queryParameters = queryParameters.set('outcomesOfInterest', outcomesOfInterest);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v3/studies/joined", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.getStudy = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, userId, clientId, includeCharts, recalculate, studyId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (includeCharts !== undefined && includeCharts !== null) {
            queryParameters = queryParameters.set('includeCharts', includeCharts);
        }
        if (recalculate !== undefined && recalculate !== null) {
            queryParameters = queryParameters.set('recalculate', recalculate);
        }
        if (studyId !== undefined && studyId !== null) {
            queryParameters = queryParameters.set('studyId', studyId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.get(this.basePath + "/v4/study", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.joinStudy = function (studyId, causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, userId, clientId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (studyId !== undefined && studyId !== null) {
            queryParameters = queryParameters.set('studyId', studyId);
        }
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.post(this.basePath + "/v3/study/join", null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.postVote = function (body, userId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postVote.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(this.basePath + "/v3/votes", body, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService.prototype.publishStudy = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, userId, clientId, includeCharts, recalculate, studyId, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: new encoder_1.CustomHttpUrlEncodingCodec() });
        if (causeVariableName !== undefined && causeVariableName !== null) {
            queryParameters = queryParameters.set('causeVariableName', causeVariableName);
        }
        if (effectVariableName !== undefined && effectVariableName !== null) {
            queryParameters = queryParameters.set('effectVariableName', effectVariableName);
        }
        if (causeVariableId !== undefined && causeVariableId !== null) {
            queryParameters = queryParameters.set('causeVariableId', causeVariableId);
        }
        if (effectVariableId !== undefined && effectVariableId !== null) {
            queryParameters = queryParameters.set('effectVariableId', effectVariableId);
        }
        if (predictorVariableName !== undefined && predictorVariableName !== null) {
            queryParameters = queryParameters.set('predictorVariableName', predictorVariableName);
        }
        if (outcomeVariableName !== undefined && outcomeVariableName !== null) {
            queryParameters = queryParameters.set('outcomeVariableName', outcomeVariableName);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', userId);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (includeCharts !== undefined && includeCharts !== null) {
            queryParameters = queryParameters.set('includeCharts', includeCharts);
        }
        if (recalculate !== undefined && recalculate !== null) {
            queryParameters = queryParameters.set('recalculate', recalculate);
        }
        if (studyId !== undefined && studyId !== null) {
            queryParameters = queryParameters.set('studyId', studyId);
        }
        var headers = this.defaultHeaders;
        // authentication (access_token) required
        if (this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }
        // authentication (quantimodo_oauth2) required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        return this.httpClient.post(this.basePath + "/v3/study/publish", null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    StudiesService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
    ], StudiesService);
    return StudiesService;
}());
exports.StudiesService = StudiesService;
