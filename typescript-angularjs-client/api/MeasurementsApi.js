"use strict";
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var MeasurementsApi = /** @class */ (function () {
    function MeasurementsApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'https://app.quantimo.do/api';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     * Delete a previously submitted measurement
     * @summary Delete a measurement
     * @param body The startTime and variableId of the measurement to be deleted.
     */
    MeasurementsApi.prototype.deleteMeasurement = function (body, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/measurements/delete';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteMeasurement.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * @summary Get measurements for this user
     * @param variableName Name of the variable you want measurements for
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param variableCategoryName Options: Activities, Books, Causes of Illness, Cognitive Performance, Conditions, Emotions, Environment, Foods, Location, Miscellaneous, Movies and TV, Music, Nutrients, Payments, Physical Activity, Physique, Sleep, Social Interactions, Software, Symptoms, Treatments, Vital Signs, Goals
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param userId User&#39;s id
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param connectorName Ex: facebook
     * @param value Value of measurement
     * @param unitName Options: % Recommended Daily Allowance, -4 to 4 Rating, 0 to 1 Rating, 0 to 5 Rating, 1 to 10 Rating, 1 to 5 Rating, Applications, Beats per Minute, Calories, Capsules, Centimeters, Count, Degrees Celsius, Degrees East, Degrees Fahrenheit, Degrees North, Dollars, Drops, Event, Feet, Grams, Hours, Inches, Index, Kilocalories, Kilograms, Kilometers, Liters, Meters, Micrograms, Micrograms per decilitre, Miles, Milligrams, Milliliters, Millimeters, Millimeters Merc, Milliseconds, Minutes, Pascal, Percent, Pieces, Pills, Pounds, Puffs, Seconds, Serving, Sprays, Tablets, Torr, Units, Yes/No, per Minute, Doses, Quarts, Ounces, International Units, Meters per Second
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     * @param createdAt When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local.
     * @param id Measurement id
     * @param groupingWidth The time (in seconds) over which measurements are grouped together
     * @param groupingTimezone The time (in seconds) over which measurements are grouped together
     * @param doNotProcess Ex: true
     * @param clientId Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @param doNotConvert Ex: 1
     * @param minMaxFilter Ex: 1
     */
    MeasurementsApi.prototype.getMeasurements = function (variableName, sort, limit, offset, variableCategoryName, updatedAt, userId, sourceName, connectorName, value, unitName, earliestMeasurementTime, latestMeasurementTime, createdAt, id, groupingWidth, groupingTimezone, doNotProcess, clientId, doNotConvert, minMaxFilter, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/measurements';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (variableName !== undefined) {
            queryParameters['variableName'] = variableName;
        }
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = variableCategoryName;
        }
        if (updatedAt !== undefined) {
            queryParameters['updatedAt'] = updatedAt;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (sourceName !== undefined) {
            queryParameters['sourceName'] = sourceName;
        }
        if (connectorName !== undefined) {
            queryParameters['connectorName'] = connectorName;
        }
        if (value !== undefined) {
            queryParameters['value'] = value;
        }
        if (unitName !== undefined) {
            queryParameters['unitName'] = unitName;
        }
        if (earliestMeasurementTime !== undefined) {
            queryParameters['earliestMeasurementTime'] = earliestMeasurementTime;
        }
        if (latestMeasurementTime !== undefined) {
            queryParameters['latestMeasurementTime'] = latestMeasurementTime;
        }
        if (createdAt !== undefined) {
            queryParameters['createdAt'] = createdAt;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (groupingWidth !== undefined) {
            queryParameters['groupingWidth'] = groupingWidth;
        }
        if (groupingTimezone !== undefined) {
            queryParameters['groupingTimezone'] = groupingTimezone;
        }
        if (doNotProcess !== undefined) {
            queryParameters['doNotProcess'] = doNotProcess;
        }
        if (clientId !== undefined) {
            queryParameters['clientId'] = clientId;
        }
        if (doNotConvert !== undefined) {
            queryParameters['doNotConvert'] = doNotConvert;
        }
        if (minMaxFilter !== undefined) {
            queryParameters['minMaxFilter'] = minMaxFilter;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * @summary Get pairs of measurements for correlational analysis
     * @param causeVariableName Deprecated: Name of the hypothetical predictor variable.  Ex: Sleep Duration
     * @param effectVariableName Deprecated: Name of the outcome variable of interest.  Ex: Overall Mood
     * @param causeVariableId Variable id of the hypothetical predictor variable.  Ex: 1398
     * @param effectVariableId Variable id of the outcome variable of interest.  Ex: 1398
     * @param predictorVariableName Name of the hypothetical predictor variable.  Ex: Sleep Duration
     * @param outcomeVariableName Name of the outcome variable of interest.  Ex: Overall Mood
     * @param effectUnitName Name for the unit effect measurements to be returned in
     * @param userId User&#39;s id
     * @param causeUnitName Name for the unit cause measurements to be returned in
     * @param onsetDelay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @param durationOfAction The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     */
    MeasurementsApi.prototype.getPairs = function (causeVariableName, effectVariableName, causeVariableId, effectVariableId, predictorVariableName, outcomeVariableName, effectUnitName, userId, causeUnitName, onsetDelay, durationOfAction, earliestMeasurementTime, latestMeasurementTime, limit, offset, sort, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/pairs';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (causeVariableName !== undefined) {
            queryParameters['causeVariableName'] = causeVariableName;
        }
        if (effectVariableName !== undefined) {
            queryParameters['effectVariableName'] = effectVariableName;
        }
        if (causeVariableId !== undefined) {
            queryParameters['causeVariableId'] = causeVariableId;
        }
        if (effectVariableId !== undefined) {
            queryParameters['effectVariableId'] = effectVariableId;
        }
        if (predictorVariableName !== undefined) {
            queryParameters['predictorVariableName'] = predictorVariableName;
        }
        if (outcomeVariableName !== undefined) {
            queryParameters['outcomeVariableName'] = outcomeVariableName;
        }
        if (effectUnitName !== undefined) {
            queryParameters['effectUnitName'] = effectUnitName;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        if (causeUnitName !== undefined) {
            queryParameters['causeUnitName'] = causeUnitName;
        }
        if (onsetDelay !== undefined) {
            queryParameters['onsetDelay'] = onsetDelay;
        }
        if (durationOfAction !== undefined) {
            queryParameters['durationOfAction'] = durationOfAction;
        }
        if (earliestMeasurementTime !== undefined) {
            queryParameters['earliestMeasurementTime'] = earliestMeasurementTime;
        }
        if (latestMeasurementTime !== undefined) {
            queryParameters['latestMeasurementTime'] = latestMeasurementTime;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * @summary Post Request for Measurements CSV
     * @param userId User&#39;s id
     */
    MeasurementsApi.prototype.measurementExportRequest = function (userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v2/measurements/exportRequest';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * @summary Post a new set or update existing measurements to the database
     * @param body An array of measurement sets containing measurement items you want to insert.
     * @param userId User&#39;s id
     */
    MeasurementsApi.prototype.postMeasurements = function (body, userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/measurements/post';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postMeasurements.');
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     * Update a previously submitted measurement
     * @summary Update a measurement
     * @param body The id as well as the new startTime, note, and/or value of the measurement to be updated
     */
    MeasurementsApi.prototype.updateMeasurement = function (body, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/v3/measurements/update';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateMeasurement.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    MeasurementsApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return MeasurementsApi;
}());
exports.MeasurementsApi = MeasurementsApi;
//# sourceMappingURL=MeasurementsApi.js.map